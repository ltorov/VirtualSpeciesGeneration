function InfoInitialPoint = InitialPoint(ReadInfo, useBeta, randomPoint, point, coeff)
% InfoInitialPoint = InitialPoint(ReadInfo, point, coeff)
% 
% DESCRIPTION
%
%
% REQUIRED INPUTS
%   ReadInfo: a structure generated by 'ReadLayers' function
%
% OPTIONAL INPUTS
%   point: 
%   coeff: 
%
% OUTPUTS
%   InfoInitialPoint: a structure containing:
%       -idx: 
%       -SortNormDistance:
%       -coeff:    
%%
    tic

    Rows = ReadInfo.Dimensions(1);
    NumLayers = ReadInfo.Dimensions(2);
    NormalizedClimVar = ReadInfo.NormalizedClimVar;
    Distance = zeros(1, Rows);
    
    if nargin < 3
        randomPoint = false;
    end
    if nargin < 4
        if randomPoint == true
            point = rand(NumLayers, 1);
        else
            idx = randi([0,Rows]);
            point = NormalizedClimVar(:,idx);
        end
    end
    if nargin < 5
        coeff = rand(NumLayers, 1);
    end
    
    
    if useBeta == false
        coeff = coeff/sum(coeff);
        point = point.*coeff;
        NormalizedClimVar = NormalizedClimVar.*coeff; 

        for i = 1: Rows
                Distance(i) = norm(point - NormalizedClimVar(:, i))...
                          * (2 - corr2(point, NormalizedClimVar(:, i)));
        end
    else

        [NormalizedClimVar, point] = BetaDeformations(NormalizedClimVar,point,NumLayers,Rows);
        for i = 1: Rows
            Distance(i) = norm(point - NormalizedClimVar(:, i))...
                      * (2 - corr2(point, NormalizedClimVar(:, i)));
        end
        
    end
    
    NormDistance = 1 - normalize(Distance, 2, 'range');
    [SortNormDistance, idx] = sort(NormDistance, 2, 'descend');
    
    % OUTPUT STORAGE    
    InfoInitialPoint.idx = idx;
    InfoInitialPoint.SortNormDistance = SortNormDistance;
    %InfoInitialPoint.coeff = coeff;

    toc

end