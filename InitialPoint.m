function InfoInitialPoint = InitialPoint(ReadInfo, useBeta, point, coeff)
% InfoInitialPoint = InitialPoint(ReadInfo, point, coeff)
% 
% DESCRIPTION
%
%
% REQUIRED INPUTS
%   ReadInfo: a structure generated by 'ReadLayers' function
%
% OPTIONAL INPUTS
%   point: 
%   coeff: 
%
% OUTPUTS
%   InfoInitialPoint: a structure containing:
%       -idx: 
%       -SortNormDistance:
%       -coeff:    
%%
    Rows = ReadInfo.Dimensions(1);
    NumLayers = ReadInfo.Dimensions(2);
    NormalizedClimVar = ReadInfo.NormalizedClimVar;
    Distance = zeros(1, Rows);

    if nargin < 3
        point = rand(NumLayers, 1);
        %idx = rand(Rows,1)
        %idx = randi([0,Rows],NumLayers,1)
        %point = NormalizedClimVar(:,idx);
    end
    if nargin < 4
        coeff = rand(NumLayers, 1);
    end
    
    if useBeta == false
        coeff = coeff/sum(coeff);
        point = point.*coeff;
        NormalizedClimVar = NormalizedClimVar.*coeff; 

    for i = 1: Rows
            Distance(i) = norm(point - NormalizedClimVar(:, i))...
                      * (2 - corr2(point, NormalizedClimVar(:, i)));
    end
    end

    if useBeta == true
        [NormalizedClimVar, point] = BetaDeformations(NormalizedClimVar,point,NumLayers,Rows);
        %point = BetaDeformations(point,NumLayers,1);

        for i = 1: Rows
            Distance(i) = norm(point - NormalizedClimVar(:, i))...
                      * (2 - corr2(point, NormalizedClimVar(:, i)));
    end
        
    end
    

    NormDistance = 1 - normalize(Distance, 2, 'range');
    [SortNormDistance, idx] = sort(NormDistance, 2, 'descend');
    
    % OUTPUT STORAGE    
    InfoInitialPoint.idx = idx;
    InfoInitialPoint.SortNormDistance = SortNormDistance;
    %InfoInitialPoint.coeff = coeff;

end